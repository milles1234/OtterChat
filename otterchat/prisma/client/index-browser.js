
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.14.0
 * Query Engine version: 717184b7b35ea05dfa71a3236b7af656013e1e49
 */
Prisma.prismaVersion = {
  client: "6.14.0",
  engine: "717184b7b35ea05dfa71a3236b7af656013e1e49"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UsersScalarFieldEnum = {
  id: 'id',
  email: 'email',
  emailVerification: 'emailVerification',
  image: 'image',
  username: 'username',
  display_name: 'display_name',
  avatar_url: 'avatar_url',
  status: 'status',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  providerType: 'providerType',
  providerId: 'providerId',
  providerAccountId: 'providerAccountId',
  refreshToken: 'refreshToken',
  accessToken: 'accessToken',
  accessTokenExpires: 'accessTokenExpires',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  expires: 'expires',
  sessionToken: 'sessionToken',
  accessToken: 'accessToken',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VerificationRequestScalarFieldEnum = {
  id: 'id',
  identifier: 'identifier',
  token: 'token',
  expires: 'expires',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ServersScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  icon_url: 'icon_url',
  banner_url: 'banner_url',
  owner_id: 'owner_id',
  invite_code: 'invite_code',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.ServerMembersScalarFieldEnum = {
  id: 'id',
  server_id: 'server_id',
  user_id: 'user_id',
  nickname: 'nickname',
  joined_at: 'joined_at',
  roles: 'roles'
};

exports.Prisma.CategoriesScalarFieldEnum = {
  id: 'id',
  server_id: 'server_id',
  name: 'name',
  position: 'position',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.ChannelsScalarFieldEnum = {
  id: 'id',
  server_id: 'server_id',
  name: 'name',
  type: 'type',
  topic: 'topic',
  position: 'position',
  category_id: 'category_id',
  is_nsfw: 'is_nsfw',
  created_at: 'created_at'
};

exports.Prisma.MessagesScalarFieldEnum = {
  id: 'id',
  channel_id: 'channel_id',
  author_id: 'author_id',
  content: 'content',
  message_type: 'message_type',
  reply_to_id: 'reply_to_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.MessageAttachmentsScalarFieldEnum = {
  id: 'id',
  messages_id: 'messages_id',
  filename: 'filename',
  file_url: 'file_url',
  file_size: 'file_size'
};

exports.Prisma.MessageReactionsScalarFieldEnum = {
  id: 'id',
  message_id: 'message_id',
  user_id: 'user_id',
  emoji: 'emoji',
  created_at: 'created_at'
};

exports.Prisma.RolesScalarFieldEnum = {
  id: 'id',
  server_id: 'server_id',
  name: 'name',
  color: 'color',
  permissions: 'permissions',
  position: 'position',
  is_mentionable: 'is_mentionable',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.ChannelPermissionsScalarFieldEnum = {
  id: 'id',
  channel_id: 'channel_id',
  role_id: 'role_id',
  user_id: 'user_id',
  allow_permissions: 'allow_permissions',
  deny_permissions: 'deny_permissions'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.UserStatus = exports.$Enums.UserStatus = {
  online: 'online',
  idle: 'idle',
  dnd: 'dnd',
  offline: 'offline'
};

exports.ChannelType = exports.$Enums.ChannelType = {
  text: 'text',
  voice: 'voice',
  announcement: 'announcement',
  forum: 'forum'
};

exports.Messagetype = exports.$Enums.Messagetype = {
  default: 'default',
  reply: 'reply',
  system: 'system'
};

exports.Prisma.ModelName = {
  Users: 'Users',
  Account: 'Account',
  Session: 'Session',
  VerificationRequest: 'VerificationRequest',
  Servers: 'Servers',
  ServerMembers: 'ServerMembers',
  Categories: 'Categories',
  Channels: 'Channels',
  Messages: 'Messages',
  MessageAttachments: 'MessageAttachments',
  MessageReactions: 'MessageReactions',
  Roles: 'Roles',
  ChannelPermissions: 'ChannelPermissions'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
